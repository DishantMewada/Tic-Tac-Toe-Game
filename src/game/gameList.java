/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package game;

import java.awt.Color;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import javax.swing.JFrame;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Vineeth
 */
public class gameList extends javax.swing.JFrame {

    public String username;
    private JTable gamesList;
    private DefaultTableModel showgame;
    private int usrID;
    private int gID;
    TTTWebService_Service webservice = new TTTWebService_Service();
    TTTWebService proxy = webservice.getTTTWebServicePort();

    /**
     * Creates new form gameList
     */
    public gameList() {
        initComponents();

    }

    public gameList(String name, int userid) {
        username = name;
        usrID = userid;

        initComponents();
        DisplayUsrName.setText(name);
        Showopengames();
    }

    public void Showopengames() {

        String opengames = proxy.showOpenGames();
        switch (opengames) {
            case "ERROR-NOGAMES":
                ErrorMsg.setText("           No Games to Join  ");
                ErrorMsg.setForeground(Color.red);
                break;

            case "ERROR-DB ":
                ErrorMsg.setText("Failed to connect Database");
                ErrorMsg.setForeground(Color.red);
                break;
            default:

                String[] parts = opengames.split("\\n");
                String[][] allGames = new String[parts.length][3];
                for (int j = 0; j < parts.length; j++) {
                    allGames[j][0] = parts[j].split(",")[0];
                    allGames[j][1] = parts[j].split(",")[1];
                    allGames[j][2] = parts[j].split(",")[2];
                }
                showgame = (DefaultTableModel) gameStats.getModel();
                Object[] row = new Object[3];

                for (int i = 0; i < parts.length; i++) {
                    showgame.addRow(allGames[i]);

                }
        }

//        String[] columns = {"GameID", "PlayerID", "Timestamp"};
//        if (allGames != null) {
//            gamesList = new JTable(allGames, columns);
//            openGamePanel.add(gamesList);
//            openGamePanel.setVisible(true);
//        } else {
//            //String[][] blank = {{}};
//            gamesList = new JTable();
//            openGamePanel.add(gamesList);
//        }
        gameStats.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {
                JTable source = (JTable) evt.getSource();
                int row = source.rowAtPoint(evt.getPoint());
                int column = 0;
                gID = Integer.parseInt(source.getModel().getValueAt(row, column).toString());
                System.out.println(gID);
                String gameState = proxy.getGameState(gID);
                System.out.println(gameState);
                switch (gameState) {
                    case "ERROR-NOGAMES":
                        ErrorMsg.setText("           No Games to Join  ");
                        ErrorMsg.setForeground(Color.red);
                        break;

                    case "ERROR-DB ":
                        ErrorMsg.setText("Failed to connect Database");
                        ErrorMsg.setForeground(Color.red);
                        break;
                    case "-1":
                        proxy.joinGame(usrID, gID);
                        TicTacToeMain ticTacToeMain = new TicTacToeMain(username, gID, usrID, false);
                        ticTacToeMain.setVisible(true);
                        break;
                    case "0":
                        //ErrorMsg.setText("Game in Progress");
                        break;
                    case "1":
                        //ErrorMsg.setText("Player One Won");
                        break;
                        
                    case "2":
                        //ErrorMsg.setText("Player Two Won");
                        break;
                        
                    case "3":
                        //ErrorMsg.setText("Draw Match");
                       break;


                    default:
                        ErrorMsg.setText("something went wrong");

                }

            }

        });

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollBar1 = new javax.swing.JScrollBar();
        leadershipboard = new javax.swing.JButton();
        MyStats = new javax.swing.JButton();
        new_Game = new javax.swing.JButton();
        DisplayUserName = new javax.swing.JLabel();
        ErrorMsg = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        DisplayUsrName = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        gameStats = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        Refresh = new javax.swing.JButton();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        leadershipboard.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        leadershipboard.setText("Leader Board");
        leadershipboard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                leadershipboardActionPerformed(evt);
            }
        });

        MyStats.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        MyStats.setText("My Score Card");
        MyStats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MyStatsActionPerformed(evt);
            }
        });

        new_Game.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        new_Game.setText("New Game");
        new_Game.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                new_GameActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel1.setText("Welcome");

        DisplayUsrName.setFont(new java.awt.Font("Tahoma", 3, 12)); // NOI18N
        DisplayUsrName.setText("jLabel2");

        gameStats.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Game ID", "User Name", "Time Stamp"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(gameStats);

        jLabel2.setFont(new java.awt.Font("Tahoma", 2, 12)); // NOI18N
        jLabel2.setText("                    Select Game ID to Play against that Player");

        Refresh.setText("Refresh");
        Refresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RefreshActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Refresh))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 20, Short.MAX_VALUE)
                        .addComponent(DisplayUserName, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(281, 281, 281))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(126, 126, 126)
                        .addComponent(ErrorMsg, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(DisplayUsrName, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19))
            .addGroup(layout.createSequentialGroup()
                .addGap(131, 131, 131)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(new_Game, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(leadershipboard, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(MyStats, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(DisplayUsrName)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(DisplayUserName)
                .addGap(30, 30, 30)
                .addComponent(MyStats, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(leadershipboard, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(13, 13, 13)
                .addComponent(new_Game, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(Refresh))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 148, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(ErrorMsg)
                .addGap(20, 20, 20))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void leadershipboardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_leadershipboardActionPerformed
        //gameScreen gs = new gameScreen();
        //gs.setVisible(true);
        //gs.setLocationRelativeTo(null);
        Leaderboard leaderboard = new Leaderboard(username);
        leaderboard.setVisible(true);
        //this.dispose();
    }//GEN-LAST:event_leadershipboardActionPerformed

    private void MyStatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MyStatsActionPerformed
        // TODO add your handling code here:
        MyScoreCard myscorecard = new MyScoreCard(username);
        myscorecard.setVisible(true);

    }//GEN-LAST:event_MyStatsActionPerformed

    private void new_GameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_new_GameActionPerformed
        // TODO add your handling code here:
        String gameID = proxy.newGame(usrID);
        switch (gameID) {
            case "ERROR-NOTFOUND":
                ErrorMsg.setText("           Cannot find the user   ");
                ErrorMsg.setForeground(Color.red);
                break;
            case "ERROR-RETRIEVE":
                ErrorMsg.setText("           Cannot access the Game Table   ");
                ErrorMsg.setForeground(Color.red);
                break;
            case "ERROR-INSERT":
                ErrorMsg.setText("           Cannot add a new game   ");
                ErrorMsg.setForeground(Color.red);
                break;

            case "ERROR-DB ":
                ErrorMsg.setText("Failed to connect Database");
                ErrorMsg.setForeground(Color.red);
                break;
             
            

            default:
                int gameid = Integer.parseInt(gameID);
                TicTacToeMain ticTacToeMain = new TicTacToeMain(username, gameid, usrID, true);
                ticTacToeMain.setVisible(true);
        }

    }//GEN-LAST:event_new_GameActionPerformed

    private void RefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RefreshActionPerformed
        if (showgame != null) {
            showgame.setRowCount(0);
        } else {
            // display mesage that no data exist for table
        }
        Showopengames();

    }//GEN-LAST:event_RefreshActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(gameList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(gameList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(gameList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(gameList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new gameList().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel DisplayUserName;
    private javax.swing.JLabel DisplayUsrName;
    private javax.swing.JLabel ErrorMsg;
    private javax.swing.JButton MyStats;
    private javax.swing.JButton Refresh;
    private javax.swing.JTable gameStats;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollBar jScrollBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton leadershipboard;
    private javax.swing.JButton new_Game;
    // End of variables declaration//GEN-END:variables
}
